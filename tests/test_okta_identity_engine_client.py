"""Unit tests for gimme_aws_creds"""
import hashlib
import json
import sys
import unittest
from contextlib import contextmanager
from io import StringIO
from unittest.mock import patch
from urllib.parse import quote

import requests
import responses
from fido2.attestation import PackedAttestation
from fido2.ctap2 import AttestationObject, AuthenticatorData, AttestedCredentialData

from gimme_aws_creds import errors, ui
from gimme_aws_creds.okta_identity_engine import OktaIdentityEngine


class TestOktaIdentityEngineClient(unittest.TestCase):
    """Class to test Okta Client Class.
       Mock is used to mock external calls"""

    @contextmanager
    def captured_output(self):
        """Capture StdErr and StdOut"""
        new_out, new_err = StringIO(), StringIO()
        old_out, old_err = sys.stdout, sys.stderr
        try:
            sys.stdout, sys.stderr = new_out, new_err
            yield sys.stdout, sys.stderr
        finally:
            sys.stdout, sys.stderr = old_out, old_err

    def setUp(self):
        """Set up for the unit tests"""
        self.okta_org_url = 'https://example-oie.okta.com'
        self.server_embed_link = 'https://example-oie.okta.com/home/foo/bar/baz'
        self.gimme_creds_server = 'https://localhost:8443'
        self.login_url = 'https://localhost:8443/login?stateToken=00Wf8xZJ79mSoTYnJqXbvRegT8QB1EX1IBVk1TU7KI'
        self.client_id = '00Wf8xZJ79mSoTY'
        self.client = self.setUp_client(self.okta_org_url, self.client_id, False)
        self.device_code = '7ba11a95-e564-499a-b9b0-69c01ac6bbf9'
        self.username = 'test@example.com'

        self.device_response = {
            "device_code": "7ba11a95-e564-499a-b9b0-69c01ac6bbf9",
            "user_code": "ZWGQJTMP",
            "verification_uri": "https://example-oie.okta.com/activate",
            "verification_uri_complete": "https://example-oie.okta.com/activate?user_code=ZWGQJTMP",
            "expires_in": 600,
            "interval": 5
        }

        self.token_response = {
            "token_type": "Bearer",
            "expires_in": 3600,
            "access_token": "eyJraWQiOiI0YzRwMkxudmxkdHRSdW56UHN3VzN0d0tPYzVGNkpZN1c3U1l3OEoyaXRRIiwiYWxnIjoiUlMyNTYifQ.ewogICJ2ZXIiOiAxLAogICJqdGkiOiAiQVQudlZ3QU1uaWVoVkF4THlXY2dYQW5udXh0RzM3bjROdGpaemxxRzhiSFM5ZyIsCiAgImlzcyI6ICJodHRwczovL2V4YW1wbGUtb2llLm9rdGFwcmV2aWV3LmNvbSIsCiAgImF1ZCI6ICJodHRwczovL2V4YW1wbGUtb2llLm9rdGFwcmV2aWV3LmNvbSIsCiAgInN1YiI6ICJ0ZXN0QGV4YW1wbGUuY29tIiwKICAiaWF0IjogMTY4MDExMjA3NCwKICAiZXhwIjogMTY4MDExNTY3NCwKICAiY2lkIjogIjBvYTczNnBobmFlWU9xVVJKMWQ3IiwKICAidWlkIjogIjAwdTEwYzhudXNMTDlkcllyMWQ3IiwKICAic2NwIjogWwogICAgIm9wZW5pZCIsCiAgICAib2t0YS5hcHBzLnNzbyIKICBdLAogICJhdXRoX3RpbWUiOiAxNjgwMTEwODk1Cn0.rsYdEVBraNv-25I-uQkFrvz5RC8DzQiHEI39vPIJX8yTW8eXzZgnvTqnXrkJVeMhzzVjIiiGIkVCSnXuELk9-QfEejTjbqYJL1-sAVfuVChPL4EhdnSlDy_ZpTq-L84su47TPC-i-_TY4f_LtMPjIsVImhEZKn5R8sl2imtO2bZ4rXvzh2zsk-Bo--SYjDglfg4O5pETzLiL-Ho5D7qpbgzwrqpG8HER3Mz92-QV8wJbQWzPVgGWey2aKJynEhKGZSEQO_3lMaNX4geWkiQKK6WBMMJ1HHNXeCoXXchlKheV1IG1kt3Oma0-Okr4yt-cpELwaWV6YSxOiBCLD250bg",
            "scope": "openid okta.apps.sso",
            "id_token": "ewogICJzdWIiOiAiMDB1MTBjOG51c0xMOWRyWXIxZDciLAogICJ2ZXIiOiAxLAogICJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLW9pZS5va3RhcHJldmlldy5jb20iLAogICJhdWQiOiAiMG9hNzM2cGhuYWVZT3FVUkoxZDciLAogICJpYXQiOiAxNjgwMTEyMDc0LAogICJleHAiOiAxNjgwMTE1Njc0LAogICJqdGkiOiAiSUQuMUtUUEJIX2hzRmxPQnJvREo2LUlmZFZmQVdiSWUzckkteTVFVXFlYkROcyIsCiAgImFtciI6IFsKICAgICJtZmEiLAogICAgInB3ZCIsCiAgICAiaHdrIiwKICAgICJ1c2VyIgogIF0sCiAgImlkcCI6ICIwMG8xMGM4bnJlNXNlenNpdDFkNyIsCiAgInNpZCI6ICJpZHhtd2d5R0ZvMFJpTzVZeFRYc2p4OEtRIiwKICAiYXV0aF90aW1lIjogMTY4MDExMDg5NSwKICAiYXRfaGFzaCI6ICJtajBpSEVuY1hNSGVEdFgwbnF0OEFnIgp9"
            }

        self.auth_session = {
            'username': self.username,
            'access_token': self.token_response['access_token'],
            'id_token': self.token_response['id_token'],
            'scope': self.token_response['scope']
        }

        self.web_sso_response = {
            "token_type": "N_A",
            "expires_in": 300,
            "access_token": "eyJraWQiOiI0YzRwMkxudmxkdHRSdW56UHN3VzN0d0tPYzVGNkpZN1c3U1l3OEoyaXRRIiwiYWxnIjoiUlMyNTYifQ.ewogICJ2ZXIiOiAxLAogICJqdGkiOiAiV1QuSEhEaU15X1MwM2wwc2VzeVpBaGlLTDFHcGZLYkdGemNDNWtFNk1nb05xQSIsCiAgImlzcyI6ICJodHRwczovL2V4YW1wbGUtb2llLm9rdGFwcmV2aWV3LmNvbSIsCiAgImF1ZCI6ICJodHRwczovL2V4YW1wbGUtb2llLm9rdGFwcmV2aWV3LmNvbS9sb2dpbi90b2tlbi9zc28iLAogICJzdWIiOiAiMDB1MTBjOG51c0xMOWRyWXIxZDciLAogICJpYXQiOiAxNjgwMTEyMDc1LAogICJleHAiOiAxNjgwMTEyMzc1LAogICJvcmciOiAiMDBvMTBjOG5yZTVzZXpzaXQxZDciLAogICJjaWQiOiAiMG9hNzM2cGhuYWVZT3FVUkoxZDciLAogICJzdGkiOiAiWVVoTmFrSnRWV2szVWtWQ2JpOXFNbWMxZEVGS1VVaHJlRkJKZFV0VE9XVnZiblZYWlRaV0wxbDBkV1F2T1dvNGQwaGpUa0U0UkVOdlNESndUR2x4YXciCn0.McCgGTr0C74FNMmSNGiJTOSHbLQ126lyIiPwuQuvK-1gnwHTkWBMcAbUHAqOTl1aUjtQsO1zslFrS63e4BzcxvSedl8NIyerDRCGLmT-ACt4ZWuK7FkZcYKad0InnMeenDSjzCWuE9QErBCHCr4kJV6uWRHS1CcpKOgjH3Adq47pWTecuQK_BbEEG4XhOcek47IjbOowvjbQVq0pVJR68rT0Y-Df60hoL3E5pU6iWpAmlSG3BgueTIWCXx1EWwufWGUFfsPMBsIb4ihyemC-ULfROvU6g72p4dr-F3mz8vzlNLacz-dEe_RXw9AnE7lDOVSVc8F0JSEUV3K5y-sW6g",
            "issued_token_type": "urn:okta:oauth:token-type:web_sso_token"
        }

        self.saml_response = """
        <html><body><form id="appForm" action="https&#x3a;&#x2f;&#x2f;signin.aws.amazon.com&#x2f;saml" method="POST">
    <input name="SAMLResponse" type="hidden" value=""/>
    <input name="RelayState" type="hidden" value=""/>
</form>
</body>
</html>
        """

        self.saml_data = {
            'SAMLResponse': '',
            'RelayState': '',
            'TargetUrl': 'https://signin.aws.amazon.com/saml'
        }
        
    def setUp_client(self, okta_org_url, client_id, verify_ssl_certs):
        client = OktaIdentityEngine(ui.default, okta_org_url, client_id, verify_ssl_certs)
        client.req_session = requests
        return client

    def test_get_headers(self):
        """Testing that get_headers returns the expected results"""
        header = self.client._get_headers()
        self.assertEqual(header['Accept'], 'application/json')

    @responses.activate
    def test_start_device_flow(self):
        """Test that initial authentication works with OIE"""

        responses.add(responses.POST, self.okta_org_url + '/oauth2/v1/device/authorize', status=200, body=json.dumps(self.device_response))
        result = self.client._start_device_flow()
        self.assertEqual(result, {'apiResponse': self.device_response})
    
    @responses.activate
    def test_get_user_tokens(self):
        """Test retrieving Access/ID Token from OIE"""

        responses.add(responses.POST, self.okta_org_url + '/oauth2/v1/token', status=200, body=json.dumps(self.token_response))
        result = self.client._get_user_tokens(self.device_code)
        self.assertEqual(result, self.token_response)
    
    @responses.activate
    def test_auth_session(self):
        """Test login to OIE"""

        responses.add(responses.POST, self.okta_org_url + '/oauth2/v1/device/authorize', status=200, body=json.dumps(self.device_response))
        responses.add(responses.POST, self.okta_org_url + '/oauth2/v1/token', status=200, body=json.dumps(self.token_response))
        result = self.client.auth_session()
        self.assertEqual(result, self.auth_session)
    
    @responses.activate
    def test_saml_response(self):
        """Test SAML response in OIE""" 

        responses.add(responses.POST, self.okta_org_url + '/oauth2/v1/token', status=200, body=json.dumps(self.web_sso_response))
        responses.add(responses.GET, self.okta_org_url + '/login/token/sso', status=200, body=self.saml_response)
        
        result = self.client.get_saml_response(self.server_embed_link, self.auth_session)
        self.assertEqual(result, self.saml_data)

#     @responses.activate
#     def test_login_send_sms(self):
#         """Test that SMS messages can be requested for MFA"""

#         verify_response = {
#             "stateToken": "00Wf8xZJ79mSoTYnJqXbvRegT8QB1EX1IBVk1TU7KI",
#             "type": "SESSION_STEP_UP",
#             "expiresAt": "2017-06-15T15:06:10.000Z",
#             "status": "MFA_CHALLENGE",
#             "_embedded": {
#                 "user": {
#                     "id": "00u8cakq7vQwtK7sR0h7",
#                     "profile": {
#                         "login": "Jane.Doe@example.com",
#                         "firstName": "Jane",
#                         "lastName": "Doe",
#                         "locale": "en",
#                         "timeZone": "America/Los_Angeles"
#                     }
#                 },
#                 "factor": {
#                     "id": "sms9hmdk2qvhjOQQ30h7",
#                     "factorType": "sms",
#                     "provider": "OKTA",
#                     "vendorName": "OKTA",
#                     "profile": {
#                         "phoneNumber": "+1 XXX-XXX-1234"
#                     }
#                 },
#                 "policy": {
#                     "allowRememberDevice": False,
#                     "rememberDeviceLifetimeInMinutes": 0,
#                     "rememberDeviceByDefault": False
#                 },
#                 "target": {
#                     "type": "APP",
#                     "name": "gimmecredsserver",
#                     "label": "Gimme-Creds-Server (Dev)",
#                     "_links": {
#                         "logo": {
#                             "name": "medium",
#                             "href": "https://op1static.oktacdn.com/bc/globalFileStoreRecord?id=gfsatgifysE8NG37F0h7",
#                             "type": "image/png"
#                         }
#                     }
#                 }
#             },
#             "_links": {
#                 "next": {
#                     "name": "verify",
#                     "href": "https://example.okta.com/api/v1/authn/factors/sms9hmdk2qvhjOQQ30h7/verify",
#                     "hints": {
#                         "allow": [
#                             "POST"
#                         ]
#                     }
#                 },
#                 "cancel": {
#                     "href": "https://example.okta.com/api/v1/authn/cancel",
#                     "hints": {
#                         "allow": [
#                             "POST"
#                         ]
#                     }
#                 },
#                 "prev": {
#                     "href": "https://example.okta.com/api/v1/authn/previous",
#                     "hints": {
#                         "allow": [
#                             "POST"
#                         ]
#                     }
#                 },
#                 "resend": [
#                     {
#                         "name": "sms",
#                         "href": "https://example.okta.com/api/v1/authn/factors/sms9hmdk2qvhjOQQ30h7/verify/resend",
#                         "hints": {
#                             "allow": [
#                                 "POST"
#                             ]
#                         }
#                     }
#                 ]
#             }
#         }

#         responses.add(responses.POST, 'https://example.okta.com/api/v1/authn/factors/sms9hmdk2qvhjOQQ30h7/verify', status=200, body=json.dumps(verify_response))
#         result = self.client._login_send_sms(self.state_token, self.sms_factor)
#         self.assertEqual(result, {'stateToken': self.state_token, 'apiResponse': verify_response})

#     @responses.activate
#     def test_login_send_push(self):
#         """Test that Okta Verify can be used for MFA"""

#         verify_response = {
#     "stateToken": "00Wf8xZJ79mSoTYnJqXbvRegT8QB1EX1IBVk1TU7KI",
#     "type": "SESSION_STEP_UP",
#     "expiresAt": "2017-06-15T22:32:40.000Z",
#     "status": "MFA_CHALLENGE",
#     "factorResult": "WAITING",
#     "_embedded": {
#         "user": {
#             "id": "00u8p8560rXMQ95cP0h7",
#             "profile": {
#                 "login": "jane.doe@example.com",
#                 "firstName": "Jane",
#                 "lastName": "Doe",
#                 "locale": "en",
#                 "timeZone": "America/Los_Angeles"
#             }
#         },
#         "factor": {
#             "id": "opf9ei43pbAgb2qgc0h7",
#             "factorType": "push",
#             "provider": "OKTA",
#             "vendorName": "OKTA",
#             "profile": {
#                 "credentialId": "jane.doe@example.com",
#                 "deviceType": "SmartPhone_IPhone",
#                 "keys": [
#                     {
#                         "kty": "PKIX",
#                         "use": "sig",
#                         "kid": "default",
#                         "x5c": [
#                             "fdsfsdfsdfsd"
#                         ]
#                     }
#                 ],
#                 "name": "Jane.Doe iPhone",
#                 "platform": "IOS",
#                 "version": "10.2.1"
#             }
#         },
#         "policy": {
#             "allowRememberDevice": False,
#             "rememberDeviceLifetimeInMinutes": 0,
#             "rememberDeviceByDefault": False
#         },
#         "target": {
#             "type": "APP",
#             "name": "gimmecredstest",
#             "label": "Gimme-Creds-Test",
#             "_links": {
#                 "logo": {
#                     "name": "medium",
#                     "href": "https://op1static.oktacdn.com/bc/globalFileStoreRecord?id=gfsatgifysE8NG37F0h7",
#                     "type": "image/png"
#                 }
#             }
#         }
#     },
#     "_links": {
#         "next": {
#             "name": "poll",
#             "href": "https://example.okta.com/api/v1/authn/factors/opf9ei43pbAgb2qgc0h7/verify",
#             "hints": {
#                 "allow": [
#                     "POST"
#                 ]
#             }
#         },
#         "cancel": {
#             "href": "https://example.okta.com/api/v1/authn/cancel",
#             "hints": {
#                 "allow": [
#                     "POST"
#                 ]
#             }
#         },
#         "prev": {
#             "href": "https://example.okta.com/api/v1/authn/previous",
#             "hints": {
#                 "allow": [
#                     "POST"
#                 ]
#             }
#         },
#         "resend": [
#             {
#                 "name": "push",
#                 "href": "https://example.okta.com/api/v1/authn/factors/opf9ei43pbAgb2qgc0h7/verify/resend",
#                 "hints": {
#                     "allow": [
#                         "POST"
#                     ]
#                 }
#             }
#         ]
#     }
# }

#         responses.add(responses.POST, 'https://example.okta.com/api/v1/authn/factors/opf9ei43pbAgb2qgc0h7/verify', status=200, body=json.dumps(verify_response))
#         result = self.client._login_send_push(self.state_token, self.push_factor)
#         self.assertEqual(result, {'stateToken': self.state_token, 'apiResponse': verify_response})

#     @responses.activate
#     @patch('getpass.getpass', return_value='1234qwert')
#     def test_login_input_mfa_challenge(self, mock_pass):
#         """Test that MFA works with Okta"""

#         verify_response = {
#             "stateToken": "00Wf8xZJ79mSoTYnJqXbvRegT8QB1EX1IBVk1TU7KI",
#             "type": "SESSION_STEP_UP",
#             "expiresAt": "2017-06-15T15:07:27.000Z",
#             "status": "SUCCESS",
#             "_embedded": {
#                 "user": {
#                     "id": "00u8p8560rXMQ95cP0h7",
#                     "profile": {
#                         "login": "jane.doe@example.com",
#                         "firstName": "Jane",
#                         "lastName": "Doe",
#                         "locale": "en",
#                         "timeZone": "America/Los_Angeles"
#                     }
#                 },
#                 "target": {
#                     "type": "APP",
#                     "name": "gimmecredsserver",
#                     "label": "Gimme-Creds-Server (Dev)",
#                     "_links": {
#                         "logo": {
#                             "name": "medium",
#                             "href": "https://op1static.oktacdn.com/bc/globalFileStoreRecord?id=gfsatgifysE8NG37F0h7",
#                             "type": "image/png"
#                         }
#                     }
#                 }
#             },
#             "_links": {
#                 "next": {
#                     "name": "original",
#                     "href": "https://example.okta.com/login/step-up/redirect?stateToken=00Wf8xZJ79mSoTYnJqXbvRegT8QB1EX1IBVk1TU7KI",
#                     "hints": {
#                         "allow": [
#                             "GET"
#                         ]
#                     }
#                 }
#             }
#         }
#         responses.add(responses.POST, 'https://example.okta.com/api/v1/authn/factors/sms9hmdk2qvhjOQQ30h7/verify', status=200, body=json.dumps(verify_response))
#         result = self.client._login_input_mfa_challenge(self.state_token, 'https://example.okta.com/api/v1/authn/factors/sms9hmdk2qvhjOQQ30h7/verify')
#         self.assertEqual(result, {'stateToken': self.state_token, 'apiResponse': verify_response})


#     @responses.activate
#     def test_check_push_result(self):
#         """Test that the Okta Verify response was successful"""

#         verify_response = {
#     "stateToken": "00Wf8xZJ79mSoTYnJqXbvRegT8QB1EX1IBVk1TU7KI",
#     "type": "SESSION_STEP_UP",
#     "expiresAt": "2017-06-15T22:32:40.000Z",
#     "status": "MFA_CHALLENGE",
#     "factorResult": "WAITING",
#     "_embedded": {
#         "user": {
#             "id": "00u8p8560rXMQ95cP0h7",
#             "profile": {
#                 "login": "jane.doe@example.com",
#                 "firstName": "Jane",
#                 "lastName": "Doe",
#                 "locale": "en",
#                 "timeZone": "America/Los_Angeles"
#             }
#         },
#         "factor": {
#             "id": "opf9ei43pbAgb2qgc0h7",
#             "factorType": "push",
#             "provider": "OKTA",
#             "vendorName": "OKTA",
#             "profile": {
#                 "credentialId": "jane.doe@example.com",
#                 "deviceType": "SmartPhone_IPhone",
#                 "keys": [
#                     {
#                         "kty": "PKIX",
#                         "use": "sig",
#                         "kid": "default",
#                         "x5c": [
#                             "fdsfsdfsdfsd"
#                         ]
#                     }
#                 ],
#                 "name": "Jane.Doe iPhone",
#                 "platform": "IOS",
#                 "version": "10.2.1"
#             }
#         },
#         "policy": {
#             "allowRememberDevice": False,
#             "rememberDeviceLifetimeInMinutes": 0,
#             "rememberDeviceByDefault": False
#         },
#         "target": {
#             "type": "APP",
#             "name": "gimmecredstest",
#             "label": "Gimme-Creds-Test",
#             "_links": {
#                 "logo": {
#                     "name": "medium",
#                     "href": "https://op1static.oktacdn.com/bc/globalFileStoreRecord?id=gfsatgifysE8NG37F0h7",
#                     "type": "image/png"
#                 }
#             }
#         }
#     },
#     "_links": {
#         "next": {
#             "name": "poll",
#             "href": "https://example.okta.com/api/v1/authn/factors/opf9ei43pbAgb2qgc0h7/verify",
#             "hints": {
#                 "allow": [
#                     "POST"
#                 ]
#             }
#         },
#         "cancel": {
#             "href": "https://example.okta.com/api/v1/authn/cancel",
#             "hints": {
#                 "allow": [
#                     "POST"
#                 ]
#             }
#         },
#         "prev": {
#             "href": "https://example.okta.com/api/v1/authn/previous",
#             "hints": {
#                 "allow": [
#                     "POST"
#                 ]
#             }
#         },
#         "resend": [
#             {
#                 "name": "push",
#                 "href": "https://example.okta.com/api/v1/authn/factors/opf9ei43pbAgb2qgc0h7/verify/resend",
#                 "hints": {
#                     "allow": [
#                         "POST"
#                     ]
#                 }
#             }
#         ]
#     }
# }

#         responses.add(responses.POST, 'https://example.okta.com/api/v1/authn/factors/opf9ei43pbAgb2qgc0h7/verify', status=200, body=json.dumps(verify_response))
#         result = self.client._login_send_push(self.state_token, self.push_factor)
#         self.assertEqual(result, {'stateToken': self.state_token, 'apiResponse': verify_response})

#     @responses.activate
#     @patch('builtins.input', return_value='ann@example.com')
#     @patch('getpass.getpass', return_value='1234qwert')
#     @patch('gimme_aws_creds.webauthn.WebAuthnClient.make_credential', return_value=(b'', AttestationObject.create(
#         PackedAttestation.FORMAT, AuthenticatorData.create(
#             hashlib.sha256(b'example.okta.com').digest(),
#             AuthenticatorData.FLAG.USER_PRESENT | AuthenticatorData.FLAG.USER_VERIFIED | AuthenticatorData.FLAG.ATTESTED,
#             0, AttestedCredentialData.create(b'pasten-aag-uuid\0', b'pasten-credential-id', {3: -7})
#         ), {'alg': -7, 'sig': b'pasten-sig'}
#     )))
#     def test_authenticator_enrollment(self, mock_input, mock_password, mock_webauthn_client):
#         """ Tests a new webauthn authenticator enrollment """

#         setup_factors_response = """
# <!DOCTYPE html><html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
# <div id="subcontainer" class="sign-in-common sign-in">
#     <div id="password-verification-challenge" class="sign-in-content rounded-6">
#         <h1>Please verify your password</h1>
#         <div id="creds.edit" class="ajax-form-editor mfa-challenge-form margin-top-0"><form id="creds.edit.form" class="v-form large-text-inputs clearfix leave-open-on-success" action="/user/verify_password" method="post"><div style="display:none;" class="infobox infobox-error verify-error" id="creds.edit.errors">
#                     <span class="icon error-16"></span>
#                     <p>Please review the form to correct the following errors:</p>
#                     <ul class="bullets">
#                         <li><span id="creds.password.error"></span></li>
#                     </ul>
#                 </div>
#                 <input type="hidden" class="hide" name="_xsrfToken" id="_xsrfToken" value="f94a83d1c56414a0395d340605dd4f16214ed36faa318200ae9826ef98bef4ad"/><label id="creds.password.label" for="creds.password" class="first l-txt normal margin-btm clearfix icon-16" cssErrorClass="error">Password<input id="creds.password" name="password" class="margin-top-10 challenge" tabindex="0" type="password" value="" autocomplete="off"/></label><div class="clearfix clear">
#                     <input value="Verify" name="m-save" type="button" id="creds.button.submit" class="ajax-form-submit save button allow-in-read-only allow-in-safe-mode float-l ie7-offset" tabindex="3" onclick="trackEvent('MFA Challenge')"/></div>
#             </form></div></div>
# </div>
# </body>
# </html>
# """

#         second_factor_response = '''
# <!DOCTYPE html>
# <head>
# <title>Example, Inc - Extra Verification</title>
# </head>
# <body class="auth okta-container">
# <script type="text/javascript">function runLoginPage (fn) {var mainScript = document.createElement('script');mainScript.src = 'https://ok11static.oktacdn.com/assets/js/mvc/loginpage/initLoginPage.pack.88827f9bbcc5016901b032b2e26c64bf.js';mainScript.crossOrigin = 'anonymous';mainScript.integrity = 'sha384-vHr77eH+hWDyAa9aLN7uXxy3ek1uj1quPqidwdV8ljP3b4vpyZQZUtTOSmGQQOLR';document.getElementsByTagName('head')[0].appendChild(mainScript);fn && mainScript.addEventListener('load', function () { setTimeout(fn, 1) });}</script><script type="text/javascript">
# (function(){
#   var stateToken = '00Xg1Ci6KEli1338pWmP2gHUuYe0c_F4Nwd3fmoK9';
#   var authScheme = 'OAUTH2';
#   var webauthn = true;
# </body>
# </html>
# '''

#         auth_response = {
#             "stateToken": "00Wf8xZJ79mSoTYnJqXbvRegT8QB1EX1IBVk1TU7KI",
#             "type": "SESSION_STEP_UP",
#             "expiresAt": "2017-06-15T15:42:31.000Z",
#             "status": "SUCCESS",
#             "_embedded": {
#                 "user": {
#                     "id": "00u8cakq7vQwtK7sR0h7",
#                     "profile": {
#                         "login": "ann@example.com",
#                         "firstName": "Ann",
#                         "lastName": "Pasten",
#                         "locale": "en",
#                         "timeZone": "America/Los_Angeles"
#                     }
#                 },
#                 "target": {
#                     "type": "APP",
#                     "name": "gimmecredsserver",
#                     "label": "Gimme-Creds-Server (Dev)",
#                     "_links": {
#                         "logo": {
#                             "name": "medium",
#                             "href": "https://op1static.oktacdn.com/bc/globalFileStoreRecord?id=gfsatgifysE8NG37F0h7",
#                             "type": "image/png"
#                         }
#                     }
#                 }
#             },
#             "_links": {
#                 "next": {
#                     "name": "original",
#                     "href": "https://example.okta.com/login/step-up/redirect?stateToken=00Wf8xZJ79mSoTYnJqXbvRegT8QB1EX1IBVk1TU7KI",
#                     "hints": {
#                         "allow": [
#                             "GET"
#                         ]
#                     }
#                 }
#             }
#         }

#         setup_factor_response = '''
# <!DOCTYPE html>
# <head>
# <title>Example, Inc - Extra Verification</title>
# </head>
# <body class="auth okta-container">
# <script type="text/javascript">function runLoginPage (fn) {var mainScript = document.createElement('script');mainScript.src = 'https://ok11static.oktacdn.com/assets/js/mvc/loginpage/initLoginPage.pack.88827f9bbcc5016901b032b2e26c64bf.js';mainScript.crossOrigin = 'anonymous';mainScript.integrity = 'sha384-vHr77eH+hWDyAa9aLN7uXxy3ek1uj1quPqidwdV8ljP3b4vpyZQZUtTOSmGQQOLR';document.getElementsByTagName('head')[0].appendChild(mainScript);fn && mainScript.addEventListener('load', function () { setTimeout(fn, 1) });}</script><script type="text/javascript">
# (function(){
#   var stateToken = '13371Ci6KEli4Kopasten2gHUuYe0c_F4Nwd3fmoK9';
#   var authScheme = 'OAUTH2';
#   var webauthn = true;
# </body>
# </html>
# '''

#         introspect_response = {
#             "status": "MFA_ENROLL",
#             "_embedded": {
#                 "user": {
#                     "id": "13373h4rlzEuUlUOY4x6",
#                     "passwordChanged": "2020-04-01T06:01:15.000Z",
#                     "profile": {
#                         "login": "ann@example.com",
#                         "firstName": "Ann",
#                         "lastName": "Pasten",
#                         "locale": "en",
#                         "timeZone": "America/Los_Angeles"
#                     }
#                 },
#                 "factors": [
#                     {
#                         "factorType": "webauthn",
#                         "provider": "FIDO",
#                         "vendorName": "FIDO",
#                         "_links": {
#                             "enroll": {
#                                 "href": "https://example.okta.com/api/v1/authn/factors",
#                                 "hints": {
#                                     "allow": [
#                                         "POST"
#                                     ]
#                                 }
#                             }
#                         },
#                         "status": "NOT_SETUP",
#                         "enrollment": "OPTIONAL",
#                     }
#                 ]
#             },
#         }

#         enrollment_response = {
#             "stateToken": "13371Ci6KEli4Kopasten2gHUuYe0c_F4Nwd3fmoK9",
#             "status": "MFA_ENROLL_ACTIVATE",
#             "_embedded": {
#                 "user": {
#                     "id": "13373h4rlzEuUlUOY4x6",
#                     "profile": {
#                         "login": "ann@example.com",
#                         "firstName": "Ann",
#                         "lastName": "Pasten",
#                         "locale": "en",
#                         "timeZone": "America/Los_Angeles"
#                     }
#                 },
#                 "factor": {
#                     "id": "1337831cjAy4WtMOL4x6",
#                     "factorType": "webauthn",
#                     "provider": "FIDO",
#                     "vendorName": "FIDO",
#                     "_embedded": {
#                         "activation": {
#                             "rp": {
#                                 "name": "Example, Inc"
#                             },
#                             "user": {
#                                 "displayName": "Ann Pasten",
#                                 "name": "ann@example.com",
#                                 "id": "13373h4rlzEuUlUOY4x6"
#                             },
#                             "pubKeyCredParams": [
#                                 {
#                                     "type": "public-key",
#                                     "alg": -7
#                                 },
#                                 {
#                                     "type": "public-key",
#                                     "alg": -257
#                                 }
#                             ],
#                             "challenge": "QPABsCE0Xkbzlpqb6KbS",
#                             "attestation": "direct",
#                             "authenticatorSelection": {
#                                 "userVerification": "optional",
#                                 "requireResidentKey": False
#                             },
#                             "u2fParams": {
#                                 "appid": "https://example.okta.com"
#                             },
#                             "excludeCredentials": []
#                         }
#                     }
#                 }
#             },
#             "_links": {
#                 "next": {
#                     "name": "activate",
#                     "href": "https://example.okta.com/api/v1/authn/factors/1337831cjAy4WtMOL4x6/lifecycle/activate",
#                     "hints": {
#                         "allow": [
#                             "POST"
#                         ]
#                     }
#                 },
#             }
#         }

#         mfa_activation_response = {
#             "status": "SUCCESS",
#             "sessionToken": "13381WI0WOge2jey1crR6AnAkqfXZNUjoAgnWoGXU3WVaHN8dP7Pgln",
#             "_embedded": {
#                 "user": {
#                     "id": "13373h4rlzEuUlUOY4x6",
#                     "profile": {
#                         "login": "ann@example.com",
#                         "firstName": "Ann",
#                         "lastName": "Pasten",
#                         "locale": "en",
#                         "timeZone": "America/Los_Angeles"
#                     }
#                 }
#             }
#         }

#         setup_fido_webauthn_url = self.okta_org_url + '/user/settings/factors/setup?factorType=FIDO_WEBAUTHN'
#         verify_password_redirect_url = self.okta_org_url + '/user/verify_password?fromURI=%2Fenduser%2Fsettings'

#         # Request FIDO authenticator setup - get redirected to password verification
#         responses.add(responses.GET, setup_fido_webauthn_url, status=302,
#                       adding_headers={'Location': verify_password_redirect_url})
#         responses.add(responses.GET, verify_password_redirect_url, status=200, body=setup_factors_response)
#         responses.add(responses.POST, self.okta_org_url + '/user/verify_password', status=200)

#         # MFA for password verification
#         responses.add(responses.GET, self.okta_org_url + '/login/second-factor?fromURI=%2Fenduser%2Fsettings&'
#                                                          'forcePrompt=true&hideBgImage=true',
#                       status=200, body=second_factor_response)
#         responses.add(responses.POST, self.okta_org_url + '/api/v1/authn', status=200, body=json.dumps(auth_response))

#         # Continue FIDO authenticator setup once password re-verified
#         responses.add(responses.GET, setup_fido_webauthn_url, status=200, body=setup_factor_response)

#         # Introspect webauthn factors
#         responses.add(responses.POST, self.okta_org_url + '/api/v1/authn/introspect', status=200,
#                       body=json.dumps(introspect_response))

#         # Enroll & Activate new webauthn factor
#         responses.add(responses.POST, introspect_response['_embedded']['factors'][0]['_links']['enroll']['href'],
#                       status=200, body=json.dumps(enrollment_response))
#         responses.add(responses.POST, enrollment_response['_links']['next']['href'], status=200,
#                       body=json.dumps(mfa_activation_response))

#         # Finalize factor activation
#         enrollment_finalization_redirect_url = self.okta_org_url + '/enduser/settings?enrolledFactor=FIDO_WEBAUTHN'
#         enrollment_finalization_url = self.okta_org_url + '/login/sessionCookieRedirect?' \
#                                                           'checkAccountSetupComplete=true&token={session_token}&' \
#                                                           'redirectUrl={redirect_url}'.format(
#             session_token=mfa_activation_response['sessionToken'],
#             redirect_url=quote(enrollment_finalization_redirect_url))

#         responses.add(responses.GET, url=enrollment_finalization_url, status=302,
#                       adding_headers={'Location': enrollment_finalization_redirect_url})
#         responses.add(responses.GET, url=enrollment_finalization_redirect_url, status=200)

#         credential_id, user_name = self.client.setup_fido_authenticator()
#         assert credential_id == b'pasten-credential-id'
#         assert user_name == 'ann@example.com'

#     @responses.activate
#     def test_get_saml_response(self):
#         """Test that the SAML reponse was successful"""
#         responses.add(responses.GET, 'https://example.okta.com/app/gimmecreds/exkatg7u9g6LJfFrZ0h7/sso/saml', status=200, body=self.login_saml)
#         result = self.client.get_saml_response('https://example.okta.com/app/gimmecreds/exkatg7u9g6LJfFrZ0h7/sso/saml')
#         self.assertEqual(result['TargetUrl'], 'https://localhost:8443/saml/SSO')

#     @responses.activate
#     def test_missing_saml_response(self):
#         """Test that the SAML reponse was successful (failed)"""
#         responses.add(responses.GET, 'https://example.okta.com/app/gimmecreds/exkatg7u9g6LJfFrZ0h7/sso/saml', status=200, body="")
#         with self.assertRaises(RuntimeError):
#             result = self.client.get_saml_response('https://example.okta.com/app/gimmecreds/exkatg7u9g6LJfFrZ0h7/sso/saml')

#     # @responses.activate
#     # def test_get_aws_account_info(self):
#     #     """Test the gimme_creds_server response"""
#     #     responses.add(responses.POST, 'https://localhost:8443/saml/SSO', status=200)
#     #     responses.add(responses.GET, self.gimme_creds_server + '/api/v1/accounts', status=200, body=json.dumps(self.api_results))
#     #     # The SAMLResponse value doesn't matter because the API response is mocked
#     #     saml_data = {'SAMLResponse': 'BASE64_String', 'RelayState': '', 'TargetUrl': 'https://localhost:8443/saml/SSO'}
#     #     result = self.client._get_aws_account_info(self.gimme_creds_server, saml_data)
#     #     self.assertEqual(self.client.aws_access, self.api_results)

#     @patch('builtins.input', return_value='0')
#     def test_choose_factor_sms(self, mock_input):
#         """ Test selecting SMS as a MFA"""
#         result = self.client._choose_factor(self.factor_list)
#         self.assertEqual(result, self.sms_factor)

#     @patch('builtins.input', return_value='1')
#     def test_choose_factor_push(self, mock_input):
#         """ Test selecting Okta Verify as a MFA"""
#         result = self.client._choose_factor(self.factor_list)
#         self.assertEqual(result, self.push_factor)

#     @patch('builtins.input', return_value='2')
#     def test_choose_factor_totp(self, mock_input):
#         """ Test selecting TOTP code as a MFA"""
#         result = self.client._choose_factor(self.factor_list)
#         self.assertEqual(result, self.totp_factor)

#     @patch('builtins.input', return_value='12')
#     def test_choose_bad_factor_totp(self, mock_input):
#         """ Test selecting an invalid MFA factor"""
#         with self.assertRaises(errors.GimmeAWSCredsExitBase):
#             result = self.client._choose_factor(self.factor_list)

#     @patch('builtins.input', return_value='3')
#     def test_choose_factor_webauthn(self, mock_input):
#         """ Test selecting webauthn code as a MFA"""
#         result = self.client._choose_factor(self.factor_list)
#         self.assertEqual(result, self.webauthn_factor)

#     @patch('builtins.input', return_value='a')
#     def test_choose_non_number_factor_totp(self, mock_input):
#         """ Test entering a non number value as MFA factor"""
#         with self.assertRaises(errors.GimmeAWSCredsExitBase):
#             result = self.client._choose_factor(self.factor_list)

#     def test_build_factor_name_sms(self):
#         """ Test building a display name for SMS"""
#         result = self.client._build_factor_name(self.sms_factor)
#         self.assertEqual(result, "sms: +1 XXX-XXX-1234")

#     def test_build_factor_name_push(self):
#         """ Test building a display name for push"""
#         result = self.client._build_factor_name(self.push_factor)
#         self.assertEqual(result, "Okta Verify App: SmartPhone_IPhone: Jane.Doe iPhone")

#     def test_build_factor_name_totp(self):
#         """ Test building a display name for TOTP"""
#         result = self.client._build_factor_name(self.totp_factor)
#         self.assertEqual(result, "token:software:totp( OKTA ) : jane.doe@example.com")

#     def test_build_factor_name_hardware(self):
#         """ Test building a display name for hardware"""
#         result = self.client._build_factor_name(self.hardware_factor)
#         self.assertEqual(result, "token:hardware: YUBICO")

#     def test_build_factor_name_unknown(self):
#         """ Handle an unknown MFA factor"""
#         with self.captured_output() as (out, err):
#             result = self.client._build_factor_name(self.unknown_factor)
#             self.assertEqual(result, "Unknown MFA type: UNKNOWN_FACTOR")

#     def test_build_factor_name_webauthn_unregistered(self):
#         """ Test building a display name for an unregistered webauthn factor """
#         result = self.client._build_factor_name(self.webauthn_factor)
#         self.assertEqual(result, "webauthn: webauthn")

#     def test_build_factor_name_webauthn_unregistered_with_authenticator_name(self):
#         """ Test building a display name for an unregistered webauthn factor with a specified authenticator name """
#         webauthn_factor_with_authenticator_name = self.webauthn_factor.copy()

#         authenticator_name = 'Pasten Authenticator'
#         webauthn_factor_with_authenticator_name['profile']['authenticatorName'] = authenticator_name

#         result = self.client._build_factor_name(self.webauthn_factor)
#         self.assertEqual(result, "webauthn: " + authenticator_name)

#     @patch('gimme_aws_creds.registered_authenticators.RegisteredAuthenticators.get_authenticator_user',
#            return_value='jane.doe@example.com')
#     def test_build_factor_name_webauthn_registered(self, mock_input):
#         """ Test building a display name for a registered webauthn factor """
#         result = self.client._build_factor_name(self.webauthn_factor)
#         self.assertEqual(result, "webauthn: jane.doe@example.com")

#     # def test_get_app_by_name(self):
#     #     """ Test selecting app by name"""
#     #     self.client.aws_access = self.api_results
#     #     result = self.client.get_app_by_name('Sample AWS Account')
#     #     self.assertEqual(result['name'], 'Sample AWS Account')
#     #
#     # def test_get_role_by_name(self):
#     #     """ Test selecting app by name"""
#     #     self.client.aws_access = self.api_results
#     #     result = self.client.get_role_by_name(self.api_results[0], 'ReadOnly')
#     #     self.assertEqual(result['name'], 'ReadOnly')

#     # @patch('builtins.input', return_value='0')
#     # def test_choose_role(self, mock_input):
#     #     """ Test selecting role with user input"""
#     #     result = self.client.choose_role(self.api_results[0])
#     #     self.assertEqual(result['name'], 'ReadOnly')
#     #
#     # @patch('builtins.input', return_value='0')
#     # def test_choose_app(self, mock_input):
#     #     """ Test selecting app with user input"""
#     #     self.client.aws_access = self.api_results
#     #     result = self.client.choose_app()
#     #     self.assertEqual(result['name'], 'Sample AWS Account')
